pipeline {
    agent any

    environment {
        // Define environment variables if needed
        VPS_USER = 'root' // Replace with your VPS username
        VPS_HOST = '103.168.18.176' // Replace with your VPS hostname or IP
        VPS_APP_DIR = '/system/projects/java/chavdar_vishranti/jars/config-server'
        SSH_KEY = 'C:/Users/sdc21/.ssh/id_rsa'
        JAR_FILE = 'config-server-0.0.1-SNAPSHOT.jar' // Replace with your actual JAR file name
    }

    stages {
        stage('Clone Repository') {
			steps{
                script{
                    git changelog: false, credentialsId: 'bitbucket_ip', poll: false, url: 'https://sharadchavhan001:ATBBZYgwJNFwpZvDWydYvVz8GpHeBFE9E729@bitbucket.org/java-by-2124/cv-config-server.git', branch: 'main'
                    echo '============================== workspace data sucessfully retrieved ...!!! =============================='
                }
            }
        }

        stage('Build') {
            steps {
                bat 'mvn clean install' // Adjust as needed for your project
                echo '============================== Build Sucess =============================='
            }
        }
        
        stage('Upload Jar File') {
            steps {
                script {
                    def jarFile = bat(script: 'for %%f in (target\\*.jar) do @echo %%f', returnStdout: true).trim()
                    echo "Found JAR file: ${jarFile}"
                    echo '============================== Jar file getting Successfully...!!! ============================== '
        
                    def jarFileBasename = jarFile.replace('\\', '/').replace('C:', '/mnt/c').split('/').last()
                    def workspacePath = WORKSPACE.replace('\\', '/')
                    
                    def jarRemoveScript = """
                    pkill -f ${jarFileBasename} || echo 'No running process found for ${jarFileBasename}'
                    echo 'Jar file Process Killed...!!!'
                    rm -f ${VPS_APP_DIR}/*.jar
                    echo '============================== Old Jar files removed...!!!'
                    """
                    
                    echo '============================== Previous Jar Remove operation Successfully...!!! =============================='
        
                    def uploadCmd = """
                    scp -i ${SSH_KEY} ${workspacePath}/target/${jarFileBasename} ${VPS_USER}@${VPS_HOST}:${VPS_APP_DIR}/
                    """
                    bat uploadCmd
                    echo '============================== New JAR file uploaded Successfully...!!! ============================== '
                }
            }
        }
        
        stage('Deploy Jar File') {
            steps {
                script {
                    def jarFile = 'config-server-0.0.1-SNAPSHOT.jar' // Replace with your actual JAR file name

                    echo 'Executing deployment script...'
                    def sshCommand = """ssh -i ${env.SSH_KEY} ${env.VPS_USER}@${env.VPS_HOST} "nohup java -jar ${env.VPS_APP_DIR}/${env.JAR_FILE} > ${env.VPS_APP_DIR}/app.log 2>&1 & echo 'New JAR file deployed and running...!!!'" """
                    bat(script: sshCommand)
                    
                    echo '============================== New JAR file Deployed Successfully...!!! ============================== '
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
