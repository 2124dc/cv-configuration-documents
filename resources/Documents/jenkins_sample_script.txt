pipeline {
    agent any  // Use any available Jenkins agent

    stages {
        stage('Cloning repo from bitbucket...'){
            steps{
                script{
                    git changelog: false, credentialsId: 'bitbucket_ip', poll: false, url: 'https://sharadchavhan001:ATBBZYgwJNFwpZvDWydYvVz8GpHeBFE9E729@bitbucket.org/java-by-2124/cv-config-server.git', branch: 'main'
                    echo 'workspace data sucessfully retrieved ...!!!'
                }
            }
        }
        
        stage('Build and Test') {
            steps {
                script {
                    // Navigate to the 'cv-config-server' directory within the workspace
                    // dir('cv-config-server') {
                        echo 'Building the project...'
                        bat 'mvn clean install'

                        // Running tests
                        echo 'Running tests...'
                        bat 'mvn test'
                    // }
                }
            }
        }
        
        // stage('Security Scan') {
        //     steps {
        //         script {
        //             // Run a security scan for sensitive data
        //             echo 'Running security scan...'
                    
        //             // Example of running a security scan using a hypothetical tool
        //             // Adjust the command according to your specific security tool
        //             bat 'git-secrets --scan' // Replace with your actual security scan command
                    
        //             // If using a specific security tool that requires installation, make sure it's available in the PATH or install it beforehand.
        //         }
        //     }
        // }
        
        stage('Deploy to VPS') {
            steps {
                script {
                    // Set environment variables for SSH and deployment
                    def sshHost = "103.168.18.176"
                    def sshUser = "root"
                    def remoteDir = "/system/projects/java/chavdar_vishranti/jars/config-server"
                    def sshKey = credentials('ssh-private-key-id') // Assuming you have a Jenkins credential for the SSH key

                    // // Install SSH and SCP tools
                    // echo 'Installing SSH and SCP...'
                    // bat 'apt-get update && apt-get install -y openssh-client'

                    // Build the project
                    echo 'Starting build and deployment...'
                    bat 'mvn clean install'

                    // Find the JAR file
                    def jarFile = bat(script: 'for %%f in (target/*.jar) do @echo %%f', returnStdout: true).trim()
                    echo "Found JAR file: ${jarFile}"

                    // Set up SSH key
                    echo 'Setting up SSH key...'
                    writeFile file: 'id_rsa', text: sshKey
                    bat 'chmod 600 id_rsa'
                    bat 'move id_rsa ~/.ssh/id_rsa'

                    // Test SSH connection
                    echo 'Testing SSH connection...'
                    bat "ssh -o StrictHostKeyChecking=no ${sshUser}@${sshHost} \"echo 'SSH connection successful'\""

                    // Copy JAR file to VPS
                    echo 'Copying JAR file to VPS...'
                    bat "scp -o StrictHostKeyChecking=no ${jarFile} ${sshUser}@${sshHost}:${remoteDir}"
                    echo 'Copied JAR file to VPS successfully...!!!'

                    // Run the JAR on the VPS
                    echo 'Starting Eureka Server on VPS...'
                    bat """
                        ssh -o StrictHostKeyChecking=no ${sshUser}@${sshHost} "nohup java -jar ${remoteDir}/\$(basename ${jarFile}) > /dev/null 2>&1 &"
                    """                    
                    echo 'Config Server started successfully ...!!!'
                }
            }
        }
        
        
    }

    post {
        always {
            // Clean workspace after the build
            cleanWs()
        }
    }
}
